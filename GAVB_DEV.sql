/* BANCO UTILIZADO: SQL Server */
USE GAVB_DEV
/* 1 - CRIACAO DAS TABELAS */

CREATE TABLE ORDERS_INTEGRATION(
	ORDER_ID INT NOT NULL,
	CUSTOMER_ID INT NOT NULL,
	CREATED_DATE DATETIME NOT NULL,
	PRIMARY KEY(ORDER_ID,CUSTOMER_ID)
);
GO

CREATE TABLE CUSTOMERS(
	CUSTOMERID INT PRIMARY KEY IDENTITY,
	CUSTOMER_NAME CHAR(50) NOT NULL,
	CUSTOMER_DOCUMENT CHAR(11) NOT NULL
);
GO

CREATE TABLE CUSTOMER_ADDRESS(
	CUSTOMER_ADDRESSID INT PRIMARY KEY IDENTITY,
	CUSTOMER_ID INT,
	STREET VARCHAR(100) NOT NULL,
	NUMBER CHAR(6) NOT NULL,
	COMPLEMENT VARCHAR(255),
	POSTAL_CODE NUMERIC(8) NOT NULL,
	CITY VARCHAR(255) NOT NULL,
	UF CHAR(2) NOT NULL
);
GO

CREATE TABLE ORDERS(
	ORDERID INT PRIMARY KEY IDENTITY,
	CUSTOMER_ID INT NOT NULL,
	CUSTOMER_ADDRESS_ID INT NOT NULL,
	ORDER_DATE DATE NOT NULL
);
GO

CREATE TABLE SHIPMENTS(
	SHIPMENTID INT PRIMARY KEY IDENTITY,
	ORDER_ID INT NOT NULL,
	SHIPMENTE_DATE DATE NOT NULL
);
GO

CREATE TABLE ORDERS_ITEMS(
	ORDER_ID INT NOT NULL,
	PRODUCT_ID INT NOT NULL,
	QUANTITY INT NOT NULL,
	PRIMARY KEY(ORDER_ID,PRODUCT_ID)
);
GO

CREATE TABLE PRODUCT(
	PRODUCTID INT PRIMARY KEY IDENTITY,
	NAME VARCHAR(255),
	STOCK INT NOT NULL,
	PRICE NUMERIC(4,2) NOT NULL
);
GO

/* CRIACAO DAS FKs */

/* TABELA ORDERS_INTEGRATION */

ALTER TABLE ORDERS_INTEGRATION
ADD CONSTRAINT FK_ORDERSINT_ORDERS
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS(ORDERID);

ALTER TABLE ORDERS_INTEGRATION
ADD CONSTRAINT FK_ORDERSINT_CUSTOMERS
FOREIGN KEY (CUSTOMER_ID)
REFERENCES CUSTOMERS(CUSTOMERID);
GO
/* ---------------- */


/* TABELA ORDERS */

ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_CUSTOMERS
FOREIGN KEY (CUSTOMER_ID)
REFERENCES CUSTOMERS(CUSTOMERID);

ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_CUSTOMERADDRESS
FOREIGN KEY (CUSTOMER_ADDRESS_ID)
REFERENCES CUSTOMER_ADDRESS(CUSTOMER_ADDRESSID);
GO
/* ---------------- */


/* TABELA ORDERS_ITEMS */

ALTER TABLE ORDERS_ITEMS
ADD CONSTRAINT FK_ORDERSITEMS_ORDERS
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS(ORDERID);

ALTER TABLE ORDERS_ITEMS
ADD CONSTRAINT FK_ORDERSITEMS_PRODUCT
FOREIGN KEY (PRODUCT_ID)
REFERENCES PRODUCT(PRODUCTID);
GO
/* ---------------- */


/* TABELA CUSTOMER_ADDRESS */

ALTER TABLE CUSTOMER_ADDRESS
ADD CONSTRAINT FK_CUSTOMERADDRESS_CUSTOMERS
FOREIGN KEY (CUSTOMER_ID)
REFERENCES CUSTOMERS(CUSTOMERID);
GO
/* ---------------- */


/* TABELA SHIPMENTS */

ALTER TABLE SHIPMENTS
ADD CONSTRAINT FK_SHIPMENTS_ORDERS
FOREIGN KEY (ORDER_ID)
REFERENCES ORDERS(ORDERID);
GO
/* ---------------- */


/* ---------------------FIM QUESTAO 1-------------------------- */




/* 2 - CRIACAO DAS TRIGGERS */

CREATE TRIGGER TG_INSERT_ORDER
ON DBO.ORDERS
FOR INSERT 
AS

	INSERT INTO ORDERS_INTEGRATION
	(ORDER_ID,CUSTOMER_ID,CREATED_DATE)
	SELECT ORDERID,CUSTOMER_ID,GETDATE()
	FROM inserted

GO

/* 3 - CRIACAO DAS TRIGGERS */

CREATE TRIGGER TRG_ATUALIZA_ESTOQUE
ON DBO.ORDERS_ITEMS
FOR INSERT 
AS
	UPDATE PRODUCT
	SET STOCK = STOCK - I.QUANTITY
	FROM inserted I
	WHERE PRODUCT.PRODUCTID=I.PRODUCT_ID
	
	PRINT 'TRIGGER ATT ESTOQUE EXECUTADA COM SUCESSO'
GO

/* 4 - PROCEDURE PARA ATUALIZAR O PREÇO DOS PRODUTOS */

CREATE PROCEDURE P_AttPreco
	@TipoOp INT,
	@PorcAtt INT,
	@idProduto INT null
AS
BEGIN
		
		IF @TipoOp = 1 and @idProduto != NULL
		UPDATE PRODUCT
		SET PRICE = ((@PorcAtt/100)*PRICE)+PRICE
		WHERE PRODUCTID = @idProduto

		ELSE IF @TipoOp = 1 and @idProduto = NULL
		UPDATE PRODUCT
		SET PRICE = ((@PorcAtt/100)*PRICE)+PRICE

		ELSE IF @TipoOp = 0 and @idProduto != NULL
		UPDATE PRODUCT
		SET PRICE = ((@PorcAtt/100)*PRICE)-PRICE
		WHERE PRODUCTID = @idProduto

		ELSE IF @TipoOp = 0 and @idProduto = NULL
		UPDATE PRODUCT
		SET PRICE = ((@PorcAtt/100)*PRICE)-PRICE
		WHERE PRODUCTID = @idProduto

		ELSE
		PRINT 
		'OPERAÇÃO INVALIDA, APENAS TIPOS 0(DESCONTO) OU 1(AUMENTO)'
END
GO


/* 5 - INSERIR */

INSERT INTO PRODUCT 
VALUES('iPhone 8',5000,50);
GO

INSERT INTO PRODUCT 
VALUES('Capa iPhone 7',5000,30);
GO

INSERT INTO PRODUCT 
VALUES('Capa iPhone 6',5000,20);

INSERT INTO PRODUCT 
VALUES('Capa iPhone 7',5000,30);

INSERT INTO PRODUCT 
VALUES('Capa Redmi Note 7',2000,50);

INSERT INTO PRODUCT 
VALUES('Capa Redmi Note 8',2000,60);

INSERT INTO PRODUCT 
VALUES('Capa Mi 9',2000,50);

INSERT INTO PRODUCT 
VALUES('Capa Mi 8',2000,50);

INSERT INTO PRODUCT 
VALUES('Capa Mi 7',2000,50);

INSERT INTO PRODUCT 
VALUES('Capa Mi 6',2000,50);
GO


INSERT INTO CUSTOMERS VALUES
('Inácio Lula da Silva','88555848712')
INSERT INTO CUSTOMERS VALUES
('Luisa da Rosa','88524848712')
INSERT INTO CUSTOMERS VALUES
('José da Silva','88555048712')
GO

INSERT INTO CUSTOMER_ADDRESS
VALUES(1,'AVENIDA GUILHERME SCHELL','65854',
'CASA',85456985,'CANOAS','RS')

INSERT INTO CUSTOMER_ADDRESS
VALUES(1,'AVENIDA GUILHERME SCHELL','62854',
'AP',85466985,'CANOAS','RS')

INSERT INTO CUSTOMER_ADDRESS
VALUES(2,'AVENIDA BOQUEIRAO','54',
'ENTRE AS RUAS ALAMEDA E FIGUEIRO',85456985,'CANOAS','RS')

INSERT INTO CUSTOMER_ADDRESS
VALUES(2,'AVENIDA INDIA','654',
'CASA',85777985,'CANOAS','RS')

INSERT INTO CUSTOMER_ADDRESS
VALUES(3,'AVENIDA JAPAO','8954',
'CASA',14586985,'CANOAS','RS')

INSERT INTO CUSTOMER_ADDRESS
VALUES(3,'AVENIDA AMERICA','69954',
'CASA',956985,'CANOAS','RS')
GO

INSERT INTO ORDERS
VALUES(1,1,'03-03-2020')
INSERT INTO ORDERS
VALUES(1,1,'03-03-2020')
INSERT INTO ORDERS
VALUES(1,1,'03-03-2020')
INSERT INTO ORDERS
VALUES(1,1,'03-03-2020')

INSERT INTO ORDERS
VALUES(2,3,'03-03-2020')
INSERT INTO ORDERS
VALUES(2,4,'03-03-2020')

INSERT INTO ORDERS
VALUES(3,5,'03-03-2020')
INSERT INTO ORDERS
VALUES(3,7,'03-03-2020')

GO

INSERT INTO ORDERS_ITEMS
VALUES(1,6,20)
INSERT INTO ORDERS_ITEMS
VALUES(1,4,200)
INSERT INTO ORDERS_ITEMS
VALUES(2,10,1500)
INSERT INTO ORDERS_ITEMS
VALUES(2,7,2300)

INSERT INTO ORDERS_ITEMS
VALUES(5,6,20)
INSERT INTO ORDERS_ITEMS
VALUES(6,4,200)

INSERT INTO ORDERS_ITEMS
VALUES(7,10,100)
INSERT INTO ORDERS_ITEMS
VALUES(8,7,200)
GO

/* 6 - QUERY */

SELECT ORDERS.ORDERID, ORDERS.ORDER_DATE, PRODUCT.PRODUCTID,
PRODUCT.PRICE, (PRODUCT.PRICE * ORDERS_ITEMS.QUANTITY)
AS "VALOR TOTAL DO PEDIDO" FROM ORDERS
INNER JOIN ORDERS_ITEMS
ON ORDERS_ITEMS.ORDER_ID=ORDERS.ORDERID
INNER JOIN PRODUCT
ON PRODUCT.PRODUCTID=ORDERS_ITEMS.PRODUCT_ID
GO

/* 7 - QUERY */
SELECT C.CUSTOMERID, C.CUSTOMER_NAME, C.CUSTOMER_DOCUMENT,
(P.PRICE * OI.QUANTITY) AS "TOTAL DO PEDIDO", O.ORDER_DATE FROM CUSTOMERS C
INNER JOIN ORDERS O
ON O.CUSTOMER_ID = C.CUSTOMERID
INNER JOIN ORDERS_ITEMS OI
ON OI.ORDER_ID = O.ORDERID
INNER JOIN PRODUCT P
ON P.PRODUCTID=OI.PRODUCT_ID
GO